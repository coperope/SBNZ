package recommendation_rules

//list any import classes here.
import main.facts.Customer;
import main.facts.RentalRecommendations;
import main.facts.Category;
import main.facts.Tag;
import main.facts.Brand;
import main.facts.Fuel;
import main.facts.Transmission;
import main.facts.Vehicle;
import main.facts.Rental;
import main.facts.User;
import main.facts.OwnerStatus;
import main.facts.Bundle;
import main.facts.Malfunction;
import main.facts.MalfunctionType;
import main.facts.RentalHistory;

import java.lang.Long
import java.util.List;

query checkMalfunctions(List vehicleRentals, List $rentals, MalfunctionType desiredType)
	accumulate(
        Rental($r: this, $malfunctions: malfunctions, System.currentTimeMillis()/1000 - 6652800 < dateTo ) from vehicleRentals and
        List(size > 0) from collect(
            Malfunction(type == desiredType) from $malfunctions
        ),
        $rentals:= collectList($r)
    )
end

rule "Service needed"
salience ((int)((100 - $rentals.size())))
lock-on-active true
no-loop true
agenda-group "warnings"
    when
        $v: Vehicle($vehicleId: id)
        $vehicleRentals: List() from collect( Rental(vehicle.id == $v.id, finished == true) )
        checkMalfunctions($vehicleRentals, $rentals, MalfunctionType.INTERMEDIATE;)
        Number($traveledSum : intValue) from accumulate(
            Rental($traveledKm: traveledKm, System.currentTimeMillis()/1000 - 6652800 < dateTo ) from $vehicleRentals
            ,
            sum($traveledKm)
        )
        eval(($rentals.size() >= 3) || ($traveledSum >= 2000))
    then
    	modify ($v) {setWarning("Service needed")}
    	vehicleRepo.save($v);
    	System.out.println("--------------------------------------------");
    	System.out.println("Intermediate malfunctions: " + $rentals.size());
    	System.out.println("Traveled mileage: " + $traveledSum);
        System.out.println("--------------------------------------------");
end


rule "Serious malfunctions"
salience ((int)((100 - $rentals.size() * 3)))
lock-on-active true
no-loop true
agenda-group "warnings"
    when
        $v: Vehicle($vehicleId: id)
        $vehicleRentals: List() from collect( Rental(vehicle.id == $v.id, finished == true) )
        checkMalfunctions($vehicleRentals, $rentals, MalfunctionType.SERIOUS;)
        eval($rentals.size() >= 1)
    then
    	String malfunctions = "SERIOUS MALFUNCTIONS: ";
    	for (Object rent: $rentals) {
    		for (Object mal: ((Rental)rent).getMalfunctions()){
    			malfunctions += ((Malfunction)mal).getName() + ", ";
    		}
    	}
    	modify ($v) {setWarning(malfunctions)};
    	vehicleRepo.save($v);
    	System.out.println("--------------------------------------------");
    	System.out.println("Serious malfunctions: " + $rentals.size());
        System.out.println("--------------------------------------------");
end


rule "Warnings - Remove vehicle from session"
agenda-group "warnings"
salience 0
    when
    	$v: Vehicle()
    then
        System.out.println("------------- WARNING RULES: Removing vehicle -------------");
    	delete($v);
end

rule "Warnings - Remove rental from session"
agenda-group "warnings"
salience 0
    when
    	$r: Rental()
    then
        System.out.println("------------- WARNING RULES: Removing rental -------------");
    	delete($r);
end
