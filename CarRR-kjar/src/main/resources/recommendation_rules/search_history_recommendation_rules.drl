//created on: May 18, 2020
package recommendation_rules

import main.facts.Customer;
import main.facts.PreferencesRecommendations;
import main.facts.Category;
import main.facts.Tag;
import main.facts.Brand;
import main.facts.Fuel;
import main.facts.Transmission;
import main.facts.CustomerPreferences;
import main.facts.Vehicle;
import main.facts.SearchHistory;
import main.facts.SearchRecommendations;
import main.facts.User;
import main.facts.Recommendations;

global main.repository.RecommendationsRepo recommendationsRepo;


rule "Search history brand rule"
agenda-group "search"
salience 10
no-loop true
lock-on-active true
    when
        Customer( $searchHistory: searchHistory, $recommendations: recommendations)
        SearchHistory($searchBrands: brands) from $searchHistory
        
        $vehicle: Vehicle($brand: brand)
    then
    	modify ($recommendations) {addSearchHits($vehicle, $searchBrands.get($brand))}
end

rule "Search history category rule"
agenda-group "search"
salience 10
no-loop true
lock-on-active true
    when
        Customer($searchHistory: searchHistory, $recommendations: recommendations)
        SearchHistory($searchCategories: categories) from $searchHistory

        $vehicle: Vehicle($categories: categories)
        Number($preferencesHit : intValue) from accumulate(
            $c: Category() from $categories
            ,
            init(int count = 0;),
            action(count += ($searchCategories.get($c)!=null) ? (int)$searchCategories.get($c) : 0;),
            result(count)
        )
    then
    	modify ($recommendations) {addSearchHits($vehicle, $preferencesHit)}
end

rule "Search history tag rule"
agenda-group "search"
salience 10
no-loop true
lock-on-active true
    when
        Customer($searchHistory: searchHistory, $recommendations: recommendations)
        SearchHistory($searchTags: tags) from $searchHistory

        $vehicle: Vehicle($tags: tags)
        Number($preferencesHit : intValue) from accumulate(
            $t: Tag() from $tags
            ,
            init(int count = 0;),
            action(count += ($searchTags.get($t)!=null) ? (int)$searchTags.get($t) : 0;),
            result(count)
        )
    then
    	modify ($recommendations) {addSearchHits($vehicle, $preferencesHit)}
end

rule "Search history transmission rule"
agenda-group "search"
salience 10
no-loop true
lock-on-active true
    when
        Customer($searchHistory: searchHistory, $recommendations: recommendations)
        SearchHistory($searchTransmission: transmission) from $searchHistory

        $vehicle: Vehicle($transmission: transmission)
    then
        modify ($recommendations) {addSearchHits($vehicle, $searchTransmission.get($transmission))}
end

rule "Search history seatsNo rule"
agenda-group "search"
salience 10
no-loop true
lock-on-active true
    when
        Customer($searchHistory: searchHistory, $recommendations: recommendations)
        SearchHistory($searchSeatsNo: seatsNo) from $searchHistory

        $vehicle: Vehicle($seatsNo: seatsNo)
    then
        modify ($recommendations) {addSearchHits($vehicle, $searchSeatsNo.get($seatsNo))}
end

rule "Search history doorNo rule"
agenda-group "search"
salience 10
no-loop true
lock-on-active true
    when
        Customer($searchHistory: searchHistory, $recommendations: recommendations)
        SearchHistory($searchDoorNo: doorNo) from $searchHistory

        $vehicle: Vehicle($doorNo: doorNo)
    then
        modify ($recommendations) {addSearchHits($vehicle, $searchDoorNo.get($doorNo))}
end

rule "Search history Fuel Consumption rule"
agenda-group "search"
salience 10
no-loop true
lock-on-active true
    when
        Customer($searchHistory: searchHistory, $recommendations: recommendations)
        SearchHistory($searchFuelConsumption: fuelConsumption) from $searchHistory

        $vehicle: Vehicle($fuelConsumption: fuelConsumption)
    then
        modify ($recommendations) {addSearchHits($vehicle, $searchFuelConsumption.get($fuelConsumption))}
end

rule "Search history model rule"
agenda-group "search"
salience 10
no-loop true
lock-on-active true
    when
        Customer($searchHistory: searchHistory, $recommendations: recommendations)
        SearchHistory($searchModels: model) from $searchHistory

        $vehicle: Vehicle($model: model)
    then
        modify ($recommendations) {addSearchHits($vehicle, $searchModels.get($model))}
end

rule "Search history fuel rule"
agenda-group "search"
salience 10
no-loop true
lock-on-active true
    when
        Customer($searchHistory: searchHistory, $recommendations: recommendations)
        SearchHistory($searchFuel: fuel) from $searchHistory

        $vehicle: Vehicle($fuel: fuel)
    then
        modify ($recommendations) {addSearchHits($vehicle, $searchFuel.get($fuel))}
end

rule "Rental - Save recommendations and remove facts from session"
agenda-group "search"
salience 2
    when
        not{
            Bundle()
        }
    	$c: Customer($recommendations: recommendations)
        $r: Recommendations() from $recommendations
    then
        System.out.println("------------- SEARCH RULES: Removing customer and recommendations -------------");
    	customerRepository.save($c);
    	delete($c);
    	delete($r);
end

rule "Search - Remove vehicle from session"
agenda-group "search"
salience 1
    when
        not{
            Bundle()
        }
    	$v: Vehicle()
    then
        System.out.println("------------- SEARCH RULES: Removing vehicle -------------");
    	delete($v);
end

rule "Search - increase number of finished recommendation rules"
agenda-group "search"
no-loop true
salience 1
    when
        $b: Bundle($finishedRules: finishedRules)
    then
        System.out.println("------------- SEARCH RULES: Search recommendation rules done - increase count -------------");
        modify ($b) {increaseFinishedRules()}
end

rule "Search - remove vehicle from session if all done"
agenda-group "search"
salience 0
    when
        $b: Bundle($finishedRules: finishedRules)
    	$v: Vehicle()
    then
    if($finishedRules >= 3){
         delete($v);
    }
end

rule "Search - save recommendations and remove facts from session if all done"
agenda-group "search"
salience 0
    when
        $b: Bundle($finishedRules: finishedRules)
    	$c: Customer($recommendations: recommendations)
        $r: Recommendations() from $recommendations
    then
        System.out.println("------------- SEARCH RULES: Removing customer and recommendations if all recommendation rules are done-------------");

       if($finishedRules >= 3){
            customerRepository.save($c);
            delete($c);
            delete($r);
       }
end


