//created on: May 18, 2020
package recommendation_rules

//list any import classes here.
import main.facts.Customer;
import main.facts.RentalRecommendations;
import main.facts.Category;
import main.facts.Tag;
import main.facts.Brand;
import main.facts.Fuel;
import main.facts.Transmission;
import main.facts.Vehicle;
import main.facts.Rental;
import main.facts.User;
import main.facts.OwnerStatus;
import main.facts.Bundle;
import main.facts.RentalHistory;


rule "Rental history brand rule"
agenda-group "rentals"
salience 10
//no-loop true
//lock-on-active true
    when
        Customer($rentalHistory: rentalHistory, $recommendations: recommendations)
        RentalHistory($rentalBrands: brands) from $rentalHistory

        $vehicle: Vehicle($brand: brand)
    then
		modify ($recommendations) {addRentalHits($vehicle, $rentalBrands.get($brand))}
end

rule "Rental history category rule"
agenda-group "rentals"
salience 10
//no-loop true
//lock-on-active true
    when
        Customer($rentalHistory: rentalHistory, $recommendations: recommendations)
        RentalHistory($rentalCategories: categories) from $rentalHistory

        $vehicle: Vehicle($categories: categories)
        Number($preferencesHit : intValue) from accumulate(
            $c: Category() from $categories
            ,
            init(int count = 0;),
            action(count += ($rentalCategories.get($c)!=null) ? (int)$rentalCategories.get($c) : 0;),
            result(count)
        )
    then
    	modify ($recommendations) {addRentalHits($vehicle, $preferencesHit)}
end

rule "Rental history tag rule"
agenda-group "rentals"
salience 10
//no-loop true
//lock-on-active true
    when
        Customer($rentalHistory: rentalHistory, $recommendations: recommendations)
        RentalHistory($rentalTags: tags) from $rentalHistory

        $vehicle: Vehicle($tags: tags)
        Number($preferencesHit : intValue) from accumulate(
            $t: Tag() from $tags
            ,
            init(int count = 0;),
            action(count += ($rentalTags.get($t)!=null) ? (int)$rentalTags.get($t) : 0;),
            result(count)
        )
    then
    	modify ($recommendations) {addRentalHits($vehicle, $preferencesHit)}
end

rule "Rental history seatsNo rule"
agenda-group "rentals"
salience 10
//no-loop true
//lock-on-active true
    when
        Customer($rentalHistory: rentalHistory, $recommendations: recommendations)
        RentalHistory($rentalHistorySeatsNo: seatsNo) from $rentalHistory

        $vehicle: Vehicle($seatsNo: seatsNo)
    then
        modify ($recommendations) {addRentalHits($vehicle, $rentalHistorySeatsNo.get($seatsNo))}
end

rule "Rental history doorNo rule"
agenda-group "rentals"
salience 10
//no-loop true
//lock-on-active true
    when
        Customer($rentalHistory: rentalHistory, $recommendations: recommendations)
        RentalHistory($rentalHistoryDoorNo: doorNo) from $rentalHistory

        $vehicle: Vehicle($doorNo: doorNo)
    then
        modify ($recommendations) {addRentalHits($vehicle, $rentalHistoryDoorNo.get($doorNo))}
end

rule "Rental history Fuel Consumption rule"
agenda-group "rentals"
salience 10
//no-loop true
//lock-on-active true
    when
        Customer($rentalHistory: rentalHistory, $recommendations: recommendations)
        RentalHistory($rentalHistoryFuelConsumption: fuelConsumption) from $rentalHistory

        $vehicle: Vehicle($fuelConsumption: fuelConsumption)
    then
        modify ($recommendations) {addRentalHits($vehicle, $rentalHistoryFuelConsumption.get($fuelConsumption))}
end

rule "Rental history transmission rule"
agenda-group "rentals"
salience 10
//no-loop true
//lock-on-active true
    when
        Customer($rentalHistory: rentalHistory, $recommendations: recommendations)
        RentalHistory($rentalTransmission: transmission) from $rentalHistory

        $vehicle: Vehicle($transmission: transmission)
    then
        modify ($recommendations) {addRentalHits($vehicle, $rentalTransmission.get($transmission))}
end

rule "Rental history model rule"
agenda-group "rentals"
salience 10
//no-loop true
//lock-on-active true
    when
        Customer($rentalHistory: rentalHistory, $recommendations: recommendations)
        RentalHistory($rentalModels: model) from $rentalHistory

        $vehicle: Vehicle($model: model)
    then
        modify ($recommendations) {addRentalHits($vehicle, $rentalModels.get($model))}
end

rule "Rental history fuel rule"
agenda-group "rentals"
salience 10
//no-loop true
//lock-on-active true
    when
        Customer($rentalHistory: rentalHistory, $recommendations: recommendations)
        RentalHistory($rentalFuel: fuel) from $rentalHistory

        $vehicle: Vehicle($fuel: fuel)
    then
        modify ($recommendations) {addRentalHits($vehicle, $rentalFuel.get($fuel))}
end


rule "Rental owner set status rule"
agenda-group "rentals"
salience 10
//no-loop true
//lock-on-active true
    when
        Rental($owner: owner)
        $user: User(noOfRentals >= 10) from $owner
    then
        System.out.println("------------- RENTAL RULES: Assigning owner status. -------------");
        modify ($user) {setStatus(OwnerStatus.GOLD))};
        userRepository.save($user);
        delete($user);
end

rule "Rental - Save recommendations and remove facts from session"
agenda-group "rentals"
salience 3
    when
        not Bundle()
    	$c: Customer($recommendations: recommendations)
        $r: Recommendations() from $recommendations
    then
        System.out.println("------------- RENTAL RULES: Removing customer and recommendations -------------");
        recommendationsRepo.save($r);
        customerRepository.save($c);
    	delete($c);
    	delete($r);
end

rule "Rental - Remove vehicle from session"
agenda-group "rentals"
salience 2
    when
        not Bundle()
    	$v: Vehicle()
    then
        System.out.println("------------- RENTAL RULES: Removing vehicle -------------");
    	delete($v);
end

rule "Rental - increase number of finished recommendation rules"
agenda-group "rentals"
no-loop true
salience 2
    when
        $b: Bundle($vehicleID: vehicleID)
        $v: Vehicle(id == $vehicleID)
    then
        System.out.println("------------- RENTAL RULES: Rental recommendation rules done - increase count -------------");
        modify ($b) {increaseFinishedRules()};
end

rule "Rental - save recommendations and remove facts from session if all done"
agenda-group "rentals"
salience 1
    when
        $b: Bundle(finishedRules >= 3, $vehicleID: vehicleID)
        $v: Vehicle(id == $vehicleID)
    	$c: Customer($recommendations: recommendations)
        $r: Recommendations() from $recommendations
    then
        System.out.println("------------- RENTAL RULES: Removing customer and recommendations if all recommendation rules are done-------------");
        recommendationsRepo.save($r);
        customerRepository.save($c);
        delete($c);
        delete($r);
end

rule "Rental - remove vehicle from session if all done"
agenda-group "rentals"
salience 0
    when
        $b: Bundle(finishedRules >= 3, $vehicleID: vehicleID)
        $v: Vehicle(id == $vehicleID)
    then
		System.out.println("------------- RENTAL RULES: Removing vehicles if all recommendation rules are done-------------");
		delete($v);
		delete($b);
end

