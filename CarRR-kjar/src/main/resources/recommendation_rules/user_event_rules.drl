//created on: May 27, 2020
package recommendation_rules

//list any import classes here.
import main.events.NewVehicleEvent;
import main.events.NewSearchEvent;
import main.events.NewRentalEvent;
import main.events.NewCustomerPreferencesEvent;
import main.facts.Customer;
import main.facts.User;
import main.facts.Bundle;
import main.facts.Vehicle;
import main.repository.CustomerRepo;
import main.facts.OwnerStatus;
import java.util.ArrayList;
import java.util.List;
import java.lang.Integer;

global main.repository.RecommendationsRepo recommendationsRepo;
global main.repository.CustomerRepo customerRepository;
global main.repository.VehicleRepo vehicleRepo;
global main.repository.UserRepo userRepository;
global main.repository.RentalRepo rentalRepository;

rule "New vehicle event gold user"
agenda-group "events-group"
salience 10
    when
        $event: NewVehicleEvent($vehicle: vehicle) from entry-point "events-entry"
        Vehicle($id: id, $owner: owner) from $vehicle
        User(status == OwnerStatus.GOLD) from $owner
    then
    	System.out.println("------------- NEW VEHICLE EVENT: Starting recommendation rules -------------");
    	kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("preferences").setFocus();
    	kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("rentals").setFocus();
    	kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("search").setFocus();

    	insert($vehicle);
    	insert(new Bundle($id));
    	for(Customer customer: customerRepository.findAll()) {
    		insert(customer);
    		insert(customer.getRecommendations());
    	};
    	System.out.println("------------- GOLD USER -------------");
    	delete($event);
end

rule "New vehicle event"
agenda-group "events-group"
    when
    	$events: List(size > 4) from collect (NewVehicleEvent($vehicle: vehicle) over window:length(5) from entry-point "events-entry" )
    then
    	System.out.println("------------- NEW VEHICLE EVENT: Starting recommendation rules -------------");
    	kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("preferences").setFocus();
    	kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("rentals").setFocus();
    	kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("search").setFocus();
		for (Object event: $events) {
			insert(((NewVehicleEvent) event).getVehicle());
			insert(new Bundle(((NewVehicleEvent) event).getVehicle().getId()));
			delete(event);
		}
    	for(Customer customer: customerRepository.findAll()) {
    		insert(customer);
    		insert(customer.getRecommendations());
    	};
    	System.out.println("------------- HERE -------------");
end

rule "New Search event"
agenda-group "events-group"
    when
        $event: NewSearchEvent($search: searchDTO, $customer: customer) from entry-point "events-entry"
        $events: List(size > 5) from collect (NewSearchEvent($customer.id == customer.id) over window:length(6) from entry-point "events-entry" )
        not Number(intValue >= 5) from accumulate(
            $event2: NewSearchEvent(
                this != $event,
                customer.id == $customer.id,
                this meets[15s] $event
            ) from entry-point "events-entry",
            count($event2)
        )
    then
    	System.out.println("------------- NEW SEARCH EVENT: Starting recommendation rules -------------");
    	kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("search").setFocus();
//    	insert($search);
        insert($customer);
        insert($customer.getRecommendations());
        for (Object event: $events) {
            delete(event);
        }
        for(Vehicle vehicle: vehicleRepo.findAll()) {
        	insert(vehicle);
        };
end

rule "New Rental event"
agenda-group "events-group"
    when
        $event: NewRentalEvent($rental: rental) from entry-point "events-entry"

    then
    	System.out.println("------------- NEW RENTAL EVENT: Starting recommendation rules -------------");
    	kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("rentals").setFocus();
    	insert($rental);
    	insert($rental.getOwner());
//    	for(Customer customer: customerRepository.findAll()) {
//    		insert(customer);
//    		insert(customer.getRecommendations());
//    	};
        insert($rental.getCustomer());
        insert($rental.getCustomer().getRecommendations());
    	for(Vehicle vehicle: vehicleRepo.findAll()) {
    		insert(vehicle);
        };
end

rule "New Customer Preferences Event"
agenda-group "events-group"
    when
        $event: NewCustomerPreferencesEvent($customer: customer) from entry-point "events-entry"

    then
        System.out.println("------------- NEW CUSTOMER PREFERNECES EVENT: Starting recommendation rules -------------");
        kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("preferences").setFocus();
        insert($customer);
        insert($customer.getRecommendations());
        for(Vehicle vehicle: vehicleRepo.findAll()) {
            insert(vehicle);
        };
    end
